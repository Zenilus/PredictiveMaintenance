% setup_project.m

% Define the base directory (current directory)
baseDir = pwd;

% Define all directories to create
directories = {
    'data/raw'
    'data/processed'
    'src/preprocessing'
    'src/models'
    'src/utils'
    'results/figures'
    'results/models'
};

% Create directories
for i = 1:length(directories)
    mkdir(fullfile(baseDir, directories{i}));
end

% Create and initialize main.m
mainContent = [...
    "% Main script for Predictive Maintenance Multi-class Classification\n",...
    "clear; clc; close all;\n\n",...
    "% Add all subdirectories to path\n",...
    "addpath(genpath('src'));\n\n",...
    "% Load and prepare data\n",...
    "data = load_data();\n\n",...
    "% Preprocess data\n",...
    "[X, y] = prepare_features(data);\n\n",...
    "% Train model\n",...
    "model = train_model(X, y);\n\n",...
    "% Evaluate model\n",...
    "evaluate_model(model, X, y);\n"];
fileID = fopen('main.m', 'w');
fprintf(fileID, '%s', mainContent);
fclose(fileID);

% Create preprocessing files
prepareContent = [...
    "function [X, y] = prepare_features(data)\n",...
    "    % Prepare features for training\n",...
    "    % Remove UID and ProductID\n",...
    "    % Convert categorical variables\n",...
    "    % Normalize numerical features\n\n",...
    "    % TODO: Implement feature preparation\n",...
    "end\n"];
fileID = fopen(fullfile('src', 'preprocessing', 'prepare_features.m'), 'w');
fprintf(fileID, '%s', prepareContent);
fclose(fileID);

normalizeContent = [...
    "function X_norm = normalize_data(X)\n",...
    "    % Normalize numerical features\n",...
    "    % TODO: Implement normalization\n",...
    "end\n"];
fileID = fopen(fullfile('src', 'preprocessing', 'normalize_data.m'), 'w');
fprintf(fileID, '%s', normalizeContent);
fclose(fileID);

% Create model files
trainContent = [...
    "function model = train_model(X, y)\n",...
    "    % Train multi-class classification model\n",...
    "    % TODO: Implement model training\n",...
    "end\n"];
fileID = fopen(fullfile('src', 'models', 'train_model.m'), 'w');
fprintf(fileID, '%s', trainContent);
fclose(fileID);

evaluateContent = [...
    "function metrics = evaluate_model(model, X, y)\n",...
    "    % Evaluate model performance\n",...
    "    % TODO: Implement model evaluation\n",...
    "end\n"];
fileID = fopen(fullfile('src', 'models', 'evaluate_model.m'), 'w');
fprintf(fileID, '%s', evaluateContent);
fclose(fileID);

% Create utility files
loadDataContent = [...
    "function data = load_data()\n",...
    "    % Load data from CSV file\n",...
    "    filename = fullfile('data', 'raw', 'predictive_maintenance.csv');\n",...
    "    data = readtable(filename);\n",...
    "end\n"];
fileID = fopen(fullfile('src', 'utils', 'load_data.m'), 'w');
fprintf(fileID, '%s', loadDataContent);
fclose(fileID);

plotContent = [...
    "function plot_results(results)\n",...
    "    % Plot classification results\n",...
    "    % TODO: Implement plotting functions\n",...
    "end\n"];
fileID = fopen(fullfile('src', 'utils', 'plot_results.m'), 'w');
fprintf(fileID, '%s', plotContent);
fclose(fileID);

% Display success message
fprintf('Project structure created successfully!\n');
fprintf('Next steps:\n');
fprintf('Copy your predictive_maintenance.csv file to the data/raw directory\n');